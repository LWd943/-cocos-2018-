1、Lua的数据类型有哪些
Lua语言共有8种基本类型

[1] nil　　　　空。最简单，有且仅有值nil，表示一个无效值（在条件表达式中相当于false）

[2] boolean　　布尔。包含两个值：false和true

[3] number　　 数字。double（双精度）类型（默认类型可以修改 luaconf.h 里的定义）

[4] string　　 字符串。字符串由一对双引号或单引号来表示

[5] function　 函数。由C或Lua编写的函数

[6] userdata　 自定义类型。表示任意存储在变量中的C数据结构

[7] thread　　 线程。表示执行的独立线程，用于执行协同程序

[8] table　　　表。Lua中的表（table）其实是一个“关联数组”（associative arrays），数组的索引可以是数字或者是字符串。

               在Lua里，table的创建是通过“构造表达式”来完成，最简单构造表达式是{}，用来创建一个空表。

2、require与dofile的区别
对于同一个模块，require和dofile分别调用两次的结果是不同的。require只加载了 一次

3、Lua的特性
轻量级: 它用标准C语言编写并以源代码形式开放，编译后仅仅一百余K，可以很方便的嵌入别的程序里。

可扩展: Lua提供了非常易于使用的扩展接口和机制：由宿主语言(通常是C或C++)提供这些功能，Lua可以使用它们，就像是本来就内置的功能一样。

其它特性:

支持面向过程(procedure-oriented)编程和函数式编程(functional programming)；

自动内存管理；只提供了一种通用类型的表（table），用它可以实现数组，哈希表，集合，对象；

语言内置模式匹配；闭包(closure)；函数也可以看做一个值；
提供多线程（协同进程，并非操作系统所支持的线程）支持；
通过闭包和table可以很方便地支持面向对象编程所需要的一些关键机制，比如数据抽象，虚函数，继承和重载等。

4、pairs 和 ipairs区别
pairs: 迭代 table，可以遍历表中所有的 key 可以返回 nil
ipairs: 迭代数组，不能返回 nil,如果遇到 nil 则退出